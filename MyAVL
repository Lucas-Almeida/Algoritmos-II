#include <iostream>
#include <stdlib.h>
//Consulta AVLtree .. www.cs.usfca.edu/~galles/visualization/AVLtree.html
using namespace std;

struct no
{
	struct no* pai = NULL;
	struct no* esquerda = NULL;
	struct no* direita = NULL;
	int val, fb=0, altura;
};

struct no* raiz = NULL;
struct no* aux = NULL;

void insereBinBusca(struct no* noh, int val);
void removeBinBusca(no *noh, int val);
void inOrder(struct no* noh);
void preOrder(struct no* noh);
void postOrder(struct no* noh);
no* rotDirEsq(struct no* noh);
no* rotEsqDir(struct no* noh);
no* rotDir(struct no* noh);
no* rotEsq(struct no* noh);
void balancear(struct no* noh);
void fb(struct no* noh);
int altura(struct no* noh);
no* menorValorP(struct no* menor);
no* maiorValorP(struct no* maior);

void insereBinBusca(struct no* noh, int val)
{
	if (raiz == NULL)
	{
		raiz = new struct no;
		raiz->val = val;
	}
	else
	{
		if ((*noh).val >= val)
		{
			if ((*noh).esquerda == NULL)
			{
				(*noh).esquerda = new struct no;
				(*(*noh).esquerda).val = val;
				noh->esquerda->pai = noh;
				fb(noh->pai);

			}
			else
				insereBinBusca((*noh).esquerda, val);
		}
		else
		{
			if ((*noh).direita == NULL)
			{
				(*noh).direita = new struct no;
				(*(*noh).direita).val = val;
				noh->direita->pai = noh;
				fb(noh->pai);

			}
			else
			{
				insereBinBusca(noh->direita, val);
			}
		}
	}
}
no* desalocar(no* noh){

    if(noh != NULL){


        noh->esquerda = desalocar(noh->esquerda);
        noh->direita = desalocar(noh->direita);
    }

    return NULL;
}
void removeBinBusca(no *noh, int val)
{
	if (raiz == NULL)
	{
		cout << "AVL vazia" << endl;
		return;
	}

	if (noh->val == val)
	{
		if (noh->esquerda == NULL && noh->direita == NULL)
		{
			if (noh->pai->val > noh->val)
				noh->pai->esquerda = NULL;
			else
				noh->pai->direita = NULL;
			delete(noh);
		}
		else {
			if (noh->esquerda != NULL)
				aux = maiorValorP(noh->esquerda);
			else
				aux = menorValorP(noh->direita);
			noh->val = aux->val;
			removeBinBusca(aux, aux->val);
		}
	}
	else {
		if (noh->val > val)
			removeBinBusca(noh->esquerda, val);
		else
			removeBinBusca(noh->direita, val);
	}
}

int menorValor(struct no* menor)
{
	if (raiz == NULL)
		cout << "AVL vazia" << endl;
	else
	{
		while (menor->esquerda != NULL)
			menor = menor->esquerda;
		return menor->val;
	}
}

no* menorValorP(struct no* menor)
{
	if (raiz == NULL)
	{
		cout << "AVL vazia" << endl;
		return 0;
	}

	else
	{
		while (menor->esquerda != NULL)
			menor = menor->esquerda;
		return menor;
	}
}

int maiorValor(struct no* maior)
{
	if (raiz == NULL)
		cout << "AVL vazia" << endl;
	else
	{
		while (maior->direita != NULL)
			maior = maior->direita;
		return maior->val;
	}
}

no* maiorValorP(struct no* maior)
{
	if (raiz == NULL)
	{
		cout << "AVL vazia" << endl;
		exit(0);
	}
	else
	{
		while (maior->direita != NULL)
			maior = maior->direita;
		return maior;
	}
}

void inOrder(struct no* noh)
{
	if (raiz == NULL)
	{
		cout << "AVL vazia" << endl;
    }
	else {
		if (noh->esquerda != NULL)
			inOrder((*noh).esquerda);
		cout << (*noh).val << " " << endl;
		if (noh->direita != NULL)
			inOrder((*noh).direita);
	}
}

void preOrder(struct no* noh)
{
	if (raiz != NULL)
	{
		cout << (*noh).val << " " << endl;
		if (noh->esquerda != NULL)
			preOrder((*noh).esquerda);
		if (noh->direita != NULL)
			preOrder((*noh).direita);
	}
	else cout << "AVL vazia" << endl;
}

void postOrder(struct no* noh)
{
	if (raiz != NULL)
	{
		if (noh->esquerda != NULL)
			postOrder((*noh).esquerda);
		if (noh->direita != NULL)
			postOrder((*noh).direita);
		cout << (*noh).val << endl;
	}
	else cout << "AVL vazia" << endl;
}

void fb(struct no* noh)
{
	if (noh == NULL) return;

	noh->fb = altura(noh->esquerda) - altura(noh->direita);
	if (noh->fb <= -2 || noh->fb >= 2)
		balancear(noh);
	else
		fb(noh->pai);
}

int altura(struct no* noh)
{
	if (raiz == NULL) return 0;

	int he = altura(noh->esquerda);
	int hd = altura(noh->direita);
	int maior;
	if (he >= hd) maior = he;
	else maior = hd;

	return 1 + maior;
}

no* rotDirEsq(struct no* noh)
{
	rotDir(noh->direita);
	rotEsq(noh);
}

no* rotEsqDir(struct no* noh)
{
	rotEsq(noh->esquerda);
	rotDir(noh);
}

no* rotEsq(struct no* noh)
{
	noh->direita->pai = noh->pai;
	noh->pai = noh->direita;
	if (noh->direita->esquerda != NULL)
		noh->direita->esquerda->pai = noh;
	noh->direita = noh->direita->esquerda;
	noh->pai->esquerda = noh;
	if (noh->pai->pai->direita == noh && noh->pai->pai != NULL)
		noh->pai->pai->direita = noh->pai;
	else if (noh->pai->pai != NULL)
		noh->pai->pai->esquerda = noh->pai;
}

no* rotDir(struct no* noh)
{
	noh->esquerda->pai = noh->pai;
	noh->pai = noh->esquerda;
	if (noh->esquerda->direita != NULL)
		noh->esquerda->direita->pai = noh;
	noh->esquerda = noh->esquerda->direita;
	noh->pai->direita = noh;
	if (noh->pai->pai->esquerda == noh && noh->pai->pai != NULL)
		noh->pai->pai->esquerda = noh->pai;
	else if (noh->pai->pai != NULL)
		noh->pai->pai->direita = noh->pai;
}

void balancear(struct no* noh)
{
	if (noh == NULL)
		cout << "AVL vazia" << endl;
	else {

        if (noh->fb >= 2) {
			if (noh->direita->fb >= 0) {
				noh = rotEsq(noh);
				fb(noh->esquerda);
			}
			else {
				noh = rotDirEsq(noh);

			}
		}

	if (noh->fb <= -2) {

			if (noh->esquerda->fb <= 0){

				noh = rotDir(noh);
				fb(noh->direita);
			}
			else {
			noh = rotEsqDir(noh);
			}
		}


	}
}

bool running = true;

int main()
{
	int option;
	int key;

	while (running)

	{
	    system("cls");
	    system("color A");

		do {

			cout << "\t--------------MENU-----------\t" << endl;
			cout << "1: Inserir " << " - "; cout << "2: Excluir " << " - "; cout << "3: Em Ordem " << " - "; cout << "4: Pre Order ";
			cout << "\n5: Post Order " << " - " << "6: Menor Valor " << " - " << "7: Maior valor" << " - " << "8: Esvaziar Arvore" << " - " << "9: Sair" << endl;;
			cout << "Escolha: ";
			cin >> option;

		} while (option != 1 && option != 2 && option != 3 && option != 4 && option != 5 && option != 6 && option != 7 && option != 8);

		switch (option)
		{
			case 1:
				cout << "Insira uma chave: ";
				cin >> key;
				insereBinBusca(raiz, key);
				break;
			case 2:
				cout << "Insira uma chave: ";
				cin >> key;
				removeBinBusca(raiz, key);
				break;
			case 3:
				inOrder(raiz);
				system("pause");
				break;
			case 4:
				preOrder(raiz);
				system("pause");
				break;
			case 5:
				postOrder(raiz);
				system("pause");
				break;
			case 6:
				cout << "Menor valor: " << menorValor(raiz) << endl;
				system("pause");
				break;
			case 7:
				cout << "Maior valor: " << maiorValor(raiz) << endl;
				system("pause");
				break;
			case 8:
				raiz = desalocar(raiz);
				cout << "Arvore esvaziada!!!" << endl;
				system("pause");
				break;
            case 9:
				running = false;
				break;
			}
		}
	system("pause");
	return 0;
}
